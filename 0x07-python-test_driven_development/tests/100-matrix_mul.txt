
	>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Testing basic cases:
--------------------
    >>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    [[7, 10], [15, 22]]

    >>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
    [[13, 16]]

Testing Empty Matrices for m_a and m_b:
---------------------------------------
Empty m_a:
    >>> matrix_mul([[]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

m_a with empty lists:
    >>> matrix_mul([[], []], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ValueError: m_a can't be empty

Empty m_b:
    >>> matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

m_b with empty lists:
    >>> matrix_mul([[1, 2], [3, 4]], [[], []])
    Traceback (most recent call last):
    ValueError: m_b can't be empty

Testing Incorrect input types:
------------------------------
Integer input:
    >>> matrix_mul(1, [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], 1)
    Traceback (most recent call last):
    TypeError: m_b must be a list

Float input:
    >>> matrix_mul(1.10, [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], 1.12)
    Traceback (most recent call last):
    TypeError: m_b must be a list

Set input:
    >>> matrix_mul({1, 1}, [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], {1, 2})
    Traceback (most recent call last):
    TypeError: m_b must be a list

Dictionary input:
    >>> matrix_mul({1: 3}, [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], {1: 3})
    Traceback (most recent call last):
    TypeError: m_b must be a list

Tuple input:
    >>> matrix_mul((1, 2), [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], (1, 2))
    Traceback (most recent call last):
    TypeError: m_b must be a list

String input:
    >>> matrix_mul("string", [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], "string")
    Traceback (most recent call last):
    TypeError: m_b must be a list

Boolean input:
True:
    >>> matrix_mul(True, [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], True)
    Traceback (most recent call last):
    TypeError: m_b must be a list

    >>> matrix_mul(True, True)
    Traceback (most recent call last):
    TypeError: m_a must be a list

False:
    >>> matrix_mul(False, [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a must be a list

    >>> matrix_mul([[1, 2]], False)
    Traceback (most recent call last):
    TypeError: m_b must be a list

Testing each element in Matrix:
-------------------------------
String in matrix:
    >>> matrix_mul([[1, "test"]], [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2]], [[1, "test"]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats

List in Matrix:
    >>> matrix_mul([[1, 2], [2, [1, 2]]], [[1, 2]])
    Traceback (most recent call last):
    TypeError: m_a should contain only integers or floats

    >>> matrix_mul([[1, 2]], [[1, 2], [2, [1, 2]]])
    Traceback (most recent call last):
    TypeError: m_b should contain only integers or floats
